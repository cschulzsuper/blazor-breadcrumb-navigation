@page "/counter"

<h1>Counter</h1>

<div class="alert alert-warning" role="alert">
    Please bear in mind that this demo does not show the status of the current release.
    The demo can use features which have not been released.
</div>

<p>Thanks to the underlying logic of the <code>NavLink</code> component, the active breadcrumb is highlighted accordingly.</p>

<p><button class="btn btn-primary" @onclick="IncrementCount">Click me</button></p>

<p>Additionally this page shows one possibility how parameters can be passed to a breadcrumb.</p>

<pre class="border rounded bg-light p-3">
protected override void OnAfterRender(bool _)
{
    BreadcrumbService
        .Set&lt;IndexBreadcrumb&gt;()
        .Set&lt;CounterBreadcrumb&gt;(new Dictionary&lt;string, object&gt;
        {
            ["counter"] = currentCount
        });
}
</pre>

<p>A <code>Breadcrumb</code> implements <code>IComponent</code> which means that parameters can be injection via <code>ParameterAttribute</code>.</p>

<pre class="border rounded bg-light p-3">
public class CounterBreadcrumb : Breadcrumb
{
    [Parameter]
    public int Counter { get; set; }

    public override Task ConfigureAsync(IBreadcrumbProperties builder)
    {
        builder.Link($"Counter {Counter}", "counter");

        return Task.CompletedTask;
    }
}
</pre>

@code {

    [CascadingParameter]
    private IBreadcrumbService BreadcrumbService { get; set; }

    protected override void OnAfterRender(bool _)
    {
        BreadcrumbService
            .Set<IndexBreadcrumb>()
            .Set<CounterBreadcrumb>(new Dictionary<string, object>
            {
                ["counter"] = currentCount
            }
            );
    }

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
        StateHasChanged();
    }
}
